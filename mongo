 public interface IMongoRepository<TEntity> where TEntity : EntityBase
    {
        Task<TEntity> GetByIdAsync(TEntity id);
        Task<TEntity> InsertAsync(TEntity entity);
        Task<bool> InsertManyAsync(IEnumerable<TEntity> item, string collectionName);
        Task<bool> InsertManyAsync(IEnumerable<TEntity> item);

        Task<bool> InsertOneAsync(TEntity item);
        Task<TEntity> UpdateAsync(TEntity entity);
        Task<bool> DeleteManyAsync(Expression<Func<TEntity, bool>> predicate);
        Task<bool> DeleteAllAsync();
        Task<bool> DeleteAsync(TEntity id);
        Task<ICollection<TEntity>> FindAllByExpressionAsync(Expression<Func<TEntity, bool>> predicate);
        Task<ICollection<TEntity>> FindAllAsync();
        Task<IAsyncCursor<TEntity>> FindAllAsyncCursor();
        Task<IAsyncCursor<TEntity>> FindAllAsyncCursor(FilterDefinition<TEntity> filter, FindOptions<TEntity> findOptions);
        Task<string> UpdateManyAsync(IEnumerable<TEntity> item);
    }
    
   public class MongoRepository<TEntity> :
         IMongoRepository<TEntity>, IDisposable where
             TEntity : EntityBase
    {
        private readonly IMongoDatabase _database = null;
        protected MongoClient _client = null;
        private IMongoCollection<TEntity> collection;
        private bool disposed = false;
        public MongoRepository(IOptions<ConfigSettings> dbSettings)
        {
            int MongoDownTime = dbSettings.Value.MongoDownTime;
            _client = SetConnectionString(dbSettings.Value.MongoDBConnectionString, MongoDownTime);
            _database = _client.GetDatabase(dbSettings.Value.MongoDataBaseName);
            GetCollection();
        }
        public async Task<TEntity> GetByIdAsync(TEntity entity)
        {
            return await collection.Find(x => x.Id.Equals(entity.Id)).FirstOrDefaultAsync().ConfigureAwait(false);
        }
        public async Task<TEntity> InsertAsync(TEntity entity)
        {
            if (entity.Id == null)
            {
                entity.Id = ObjectId.GenerateNewId();
            }

            await collection.ReplaceOneAsync(
                x => x.Id.Equals(entity.Id),
                entity,
                new ReplaceOptions
                {
                    IsUpsert = true
                }).ConfigureAwait(false);

            return entity;
        }

        public async Task<bool> DeleteAsync(TEntity id)
        {
            var query = Builders<TEntity>.Filter.Where(r => r.Id == id.Id);
            var writeConcernResult = await collection.DeleteOneAsync(query).ConfigureAwait(false);
            return (writeConcernResult.DeletedCount == 1);
        }

        public async Task<ICollection<TEntity>> FindAllByExpressionAsync(
            Expression<Func<TEntity, bool>> predicate)
        {
            return await collection.Find(predicate).ToListAsync().ConfigureAwait(false);
        }
        public async Task<ICollection<TEntity>> FindAllAsync()
        {
            return await collection.Find(_ => true).ToListAsync().ConfigureAwait(false);
        }
        private void GetCollection()
        {
            collection = _database.GetCollection<TEntity>(typeof(TEntity).Name);
        }

        private IMongoCollection<T> GetCollection<T>()
        {
            return _database.GetCollection<T>(typeof(T).Name);
        }

        public async Task<TEntity> UpdateAsync(TEntity entity)
        {
            var filter = Builders<TEntity>.Filter.Eq(c => c.Id, entity.Id);

            await collection.ReplaceOneAsync(filter, entity,
               new ReplaceOptions { IsUpsert = true }).ConfigureAwait(false);

            return entity;
        }
        private MongoClient SetConnectionString(string MongoDBConnectionString, int MongoDownTime)
        {
            int count = 0;
            Console.WriteLine($"SetConnectionString started at :{DateTime.UtcNow}");
            try
            {
                if (this._client == null)
                {
                    count++;
                    var clientSettings = MongoClientSettings.FromConnectionString((MongoDBConnectionString));
                    clientSettings.MaxConnectionIdleTime = new TimeSpan(0, 0, 59);
                    clientSettings.ServerSelectionTimeout = TimeSpan.FromSeconds(MongoDownTime);
                    clientSettings.MaxConnectionPoolSize = 500;
                    clientSettings.VerifySslCertificate = false;
                    this._client = new MongoClient(clientSettings);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"{DateTime.UtcNow.ToString("yyyy-MM-dd hh:mm:ss tt", CultureInfo.InvariantCulture)} - Message not inserted in MongoDb, due to exception.{ex.Message}");
            }
            Console.WriteLine($"SetConnectionString completed at :{DateTime.UtcNow}");
            return this._client;
        }

        public async Task<bool> DeleteManyAsync(Expression<Func<TEntity, bool>> predicate)
        {
            bool result = false;
            try
            {
                await collection.DeleteManyAsync(predicate).ConfigureAwait(false);
                result = true;
            }
            catch (MongoException)
            {
                throw;
            }
            catch (Exception)
            {
                throw;
            }
            return result;
        }

        public async Task<bool> DeleteAllAsync()
        {
            bool result = false;
            try
            {
                await collection.DeleteManyAsync("{}").ConfigureAwait(false);
                result = true;
            }
            catch (MongoException)
            {
                throw;
            }
            catch (Exception)
            {
                throw;
            }
            return result;
        }
        public async Task<bool> InsertManyAsync(IEnumerable<TEntity> item)
        {
            bool result = false;
            try
            {
                await collection.InsertManyAsync(item, new InsertManyOptions() { IsOrdered = false }).ConfigureAwait(false);
                result = true;
            }
            catch (MongoException)
            {
                throw;
            }
            catch (Exception)
            {
                throw;
            }
            return result;
        }
        public async Task<bool> InsertOneAsync(TEntity item)
        {
            bool result = false;
            try
            {
                await collection.InsertOneAsync(item, new InsertOneOptions() { BypassDocumentValidation = false }).ConfigureAwait(false);
                result = true;
            }
            catch (MongoException)
            {
                throw;
            }
            catch (Exception)
            {
                throw;
            }
            return result;
        }
        public async Task<bool> InsertManyAsync(IEnumerable<TEntity> item, string collectionName)
        {
            bool result = false;
            try
            {
                var collectionValue = _database.GetCollection<TEntity>(collectionName);
                await collectionValue.InsertManyAsync(item, new InsertManyOptions() { IsOrdered = false }).ConfigureAwait(false);
                result = true;
            }
            catch (MongoException)
            {
                throw;
            }
            catch (Exception)
            {
                throw;
            }
            return result;
        }
        public async Task<IAsyncCursor<TEntity>> FindAllAsyncCursor()
        {
            return await collection.FindAsync(_ => true).ConfigureAwait(false);
        }
        public async Task<IAsyncCursor<TEntity>> FindAllAsyncCursor(FilterDefinition<TEntity> filter, FindOptions<TEntity> findOptions)
        {
            return await collection.FindAsync(filter, findOptions).ConfigureAwait(false);
        }
        protected virtual void Dispose(bool disposing)
        {
            if (!disposed)
            {
                if (disposing)
                {
                    // Dispose managed resources.
                    this._client.Cluster.Dispose();
                }
                disposed = true;
            }
        }
        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }

        public async Task<string> UpdateManyAsync(IEnumerable<TEntity> items)
        {
            BulkWriteResult result = null;
            BulkWriteOptions bulkWriteOptions = new BulkWriteOptions() { BypassDocumentValidation = true };
            string count = "";
            var models = items.Select(item => new ReplaceOneModel<TEntity>(new ExpressionFilterDefinition<TEntity>(doc => doc.Id == item.Id), item) { IsUpsert = true });
            try
            {
                result = await collection.BulkWriteAsync(models, bulkWriteOptions);
                count = result.ModifiedCount.ToString();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return count;
        }
    }
    
        public abstract class EntityBase
    {
        public ObjectId Id { get; set; }
    }
